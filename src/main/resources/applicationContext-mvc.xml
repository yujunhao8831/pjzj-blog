<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

    <!-- 对静态资源文件的访问 -->
    <mvc:default-servlet-handler />

    <!--RequestMappingHandlerAdapter-->
    <!-- 信息转换 - 开始 -->
    <mvc:annotation-driven>
        <mvc:message-converters>
            <ref bean="stringHttpMessageConverter"/>
            <ref bean="marshallingHttpMessageConverter"/>
            <ref bean="mappingJackson2HttpMessageConverter"/>
        </mvc:message-converters>
    </mvc:annotation-driven>


    <!-- 自动扫描与装配Bean -->
    <context:component-scan base-package="com.blog" use-default-filters="false">
        <!-- use-default-filters="false" : 不使用默认的扫描器 -->
        <!-- @Controller @ControllerAdvice @RestController 只对这3个注解进行扫描, 这样可以解决和Spring IOC容器同时扫描两次,创建两次Bean实例的问题 -->
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.RestController"/>
    </context:component-scan>

    <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter"/>

    <bean id="marshallingHttpMessageConverter"
          class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
        <property name="marshaller" ref="castorMarshaller"/>
        <property name="unmarshaller" ref="castorMarshaller"/>
    </bean>

    <bean id="mappingJackson2HttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>application/json</value>
                <value>application/xml</value>
                <value>text/html</value>
                <value>text/plain</value>
                <value>text/xml</value>
            </list>
        </property>
    </bean>
    <bean id="castorMarshaller" class="org.springframework.oxm.castor.CastorMarshaller"/>
    <!-- 信息转换 - 结束 -->


    <!--
         RESTful服务同一资源,多种表述 : 使用ContentNegotiatingViewResolver可以做到
         这个视图解析器允许你用同样的内容数据来呈现不同的view
         方式1  使用扩展名
            http://www.test.com/user.xml    呈现xml文件
            http://www.test.com/user.json    呈现json格式
            http://www.test.com/user       使用默认view呈现，比如jsp等
        方式2  使用http request header的Accept
            GET /user HTTP/1.1
            Accept:application/xml
            GET /user HTTP/1.1
            Accept:application/json

        方式3  使用参数
            http://www.test.com/user?format=xml
            http://www.test.com/user?format=json
            假设我们有这么一个目标：
                /user/{userid}.json    用于返回一个描述User的JSON
                    /user/{userid}        用于返回一个展示User的JSP页面
                /user/{userid}.xml     用于返回一个展示User的XML文件

     -->
    <!-- 内容协商 -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="contentNegotiationManager">
            <bean class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
                <property name="defaultContentType" value="text/html"/>
                <property name="mediaTypes">
                    <map>
                        <entry key="json" value="application/json"/>
                        <entry key="xml" value="application/xml"/>
                        <entry key="html" value="text/html"/>
                    </map>
                </property>
            </bean>
        </property>
        <!-- ViewResolver :  -->
        <property name="viewResolvers">
            <list>
                <!--
                    InternalResourceViewResolver 为Spring默认视图解析器
                    配置视图解析器 : 如何把handler 方法返回值解析为实际的物理视图
                    InternalResourceViewResolver 针对JSP,具体见源码
                -->
                <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="prefix" value="/WEB-INF/views/"/>
                    <property name="suffix" value=".html"/>
                </bean>
            </list>
        </property>
        <property name="defaultViews">
            <list>
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"/>
                <bean class="org.springframework.web.servlet.view.xml.MarshallingView">
                    <property name="marshaller" ref="castorMarshaller"/>
                </bean>
            </list>
        </property>
    </bean>

    <!-- 拦截器配置 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/*"/>
            <bean class="com.blog.interceptor.RequestMessageInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>


    <!-- 配置使用 SimpleMappingExceptionResolver 来映射异常 -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="java.lang.RuntimeException"/>
                <prop key="java.lang.Exception"/>
            </props>
        </property>
    </bean>


    <!-- 支持上传文件 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="20971520"/> <!-- 设置最大文件大小（字节）20M -->
    </bean>


    <!-- 配置直接转发的页面 -->
    <!-- 可以直接想要转发的页面,而无需再进过handler -->
    <!-- 问题 : 这样会导致以前的访问方式失效 -->
    <!-- <mvc:view-controller path="/success" view-name="success"/> -->

</beans>
